// Day 1 - Start

// Variables - holding the values
// syntax
var variableName = defaultValue;

var age = 10;
var user = 'Karthik';

// Viewing the values present inside variable
1. alert(age) => displays value in alert box
2. console.log(age) => prints value to the console.

var city;
alert(city) => undefined 
that means defaultValue is undefined

// Creating a boolean(true/false)
var isMale = true;

function 
	block of code
	code reduction
	re usability
	
// Creating a function - Approach 1
// syntax
function functionName(arguments) { 

	// return result if needed
}

function welcome(){
	console.log('Welcome to demo');
}

// executing function
// syntax
functionName(params);

welcome();

function add(x, y){
	var z = x + y;
	console.log(z);
}

add(10, 20) => prints 30

// returning the value from function
function add(x, y){
	var z = x + y;
	return z;
}
var sum = add(10,20)
alert(sum) => displays 30 in alert box

x and y are called arguments of the function
10 and 20 are called params to the function

Types
	boolean
	string
	number
	function
	undefined
	object
	
typeof(variableName or value) => returns type of value

typeof(age) => number
typeof(user) => string
typeof(isMale) => boolean
typeof(add) => function
typeof(city) => undefined

Ternary Operator
// syntax
var variableName = condition ? value1 : value2;

if condition is true
	variableName = value1;
else 
	variableName = value2;
	
var x = 5 > 10 ? 1 : 2;
x will be 2

var y = 100 > 5 ? 1 : 2;
y will be 1

// undefined handling
var a,b,c;

|| operator is used to handle undefined
var d = a || 50;
d will be 50 as a is undefined

var e = a || b || c || 90;
e will be 90

c = 80
e = a || b || c || 90;
e will be 80

function sub(x, y) {
	console.log('x is ' + x);
	console.log('y is ' + y);
	return x - y;
}

Anything with undefined will be NaN(Not a Number)
1 + undefined => NaN
1 - undefined => NaN
1 * undefined => NaN
1 / undefined => NaN

sub(10, 2) => 8
sub(10) => NaN
// if we are passing less params, it will undefined in arguments

function sub(x, y) {
	x = x || 0;
	y = y || 0;
	console.log('x is ' + x);
	console.log('y is ' + y);
	return x - y;
}

sub(10, 2, 1) => 8
// additional params will be ignored so 
	10 is copied to x
	2 is copied to y
	1 is ignored
	
// Comparison Operator
== compares only value
=== compares both value and type
1 == 1 will print true
1 == '1' will print true
1 === '1' will print false
1 === parseInt('1') will print true

parseInt => helper function exists in browser
	converts string to number
	
parseInt("100.9") => 100 => it is not trying for roundoff. It just removes the decimals.

parseFloat => converts string to float
parseFloat("100.9") => 100.9

// self executing function => function which executes itself
// syntax
(function functionName() { })();


(function welcome() {
	console.log('Welcome to Demo');
})();

var result = (function mul(x, y) {
	x = x || 1;
	y = y || 1;
	return x * y;
})(10, 20);

alert(result) => 200

mul => VM369:1 Uncaught ReferenceError: mul is not defined at <anonymous>:1:1

because the memory allocated with in the self executing function is cleared after execution

// End - Day 1

// Start - Day 2

// Creating a function - Approach 2
// syntax
var functionName = function(arguments) { 
	// return result if needed
}

var welcome = function(){
	console.log('Welcome to demo');
}

// executing function
// syntax
functionName(params);

welcome();

var div = function(x, y){
	var z = x / y;
	console.log(z);
	return z;
}
var result = div(10, 2);

// Object - key value pair

// syntax
var variableName = {};

// accessing the keys
object.key
object['key']

var neha = {
	name: 'Neha Singh',
	age: 20,
	city: 'Hyderabad'
}

console.log('Neha Singh with age 20 is from Hyderabad ');
console.log( neha.name + ' with age '+ neha.age+ ' is from ' + neha.city);
console.log( neha['name'] + ' with age '+ neha.age+ ' is from ' + neha['city']);

// name, age, city are keys of object neha

Object - key - string or number
		      string - accessing using . or []
			  number - accessing using []
	   - value - string
				number
				boolean
				
// example for key of numbers			
var test = { 
			1: 'a', 
			2: 'b'
		}
		
test['1'] will return a
test.2 throws exception as key with type number cant access using . operator

// adding key value pair to object
neha.college = "KVR";
neha['native'] = 'India';

if key exists, value of that key is updated.
if key doesn't exist, key value pair is added.

// special case/symbols
key with string can have _ symbol
var ramu = {
	first_name: 'Ramu'
}

// deleting keys
delete neha.college
delete neha['native']

// real use cases of object
// 1. object as a parameter to function
		Advantages:
		1. order of params can be anything
		2. pass only the required params

function welcome(name, age, city){
	console.log(name + ' with age '+ age + ' is from ' + city);
}

// handling undefined
function welcome2(name, age, city){
	name = name || '';
	age = age || '';
	city = city || '';
	console.log(name + ' with age '+ age + ' is from ' + city);
}
// passing only city
welcome2('', '', 'Delhi');

we cant pass city directly/only, we must pass name and age

// passing object as input
function welcome3(inputObject){
	console.log(inputObject.name + ' with age '+ inputObject.age + ' is from ' + inputObject.city);
}

welcome3({ name: 'deepak', age: 30, city: 'Visak'})
welcome3({  age: 30, city: 'Visak', name: 'deepak'})
welcome3({ city: 'Visak'});

// handling undefined in object as an input parameter
function welcome4(inputObject){
	inputObject.name = inputObject.name || '';
	inputObject.age = inputObject.age || '';
	inputObject.city = inputObject.city || '';
	console.log(inputObject.name + ' with age '+ inputObject.age + ' is from ' + inputObject.city);
}

// 2. default values
function demo(input){
	input = input || {};
	input.name = input.name || 'Guest User';
	console.log('Welcome to demo, ' + input.name);
}

// 3. organizing methods
var calculator = {
	add: function(x, y){
		return x + y;
	},
	sub: function(x, y) {
		return x - y;
	}
}

calculator.add(1, 2) => 3
calculator['sub'](1, 2) => -1

calculator.mul = function(x, y) {
	return x * y;
}

calculator['div'] = function(x, y) {
	return x / y;
}

calculator.mul(10, 20) => 200

// sample
var React = {
	createButton: function() {}
	createTextBox: function() {}
}

// value can be object also(nested object)
neha.address = {
	line1: '1/2/3',
	line2: 'Kukatpally'
}

to print kukatpally
neha.address.line2
neha.address['line2']
neha['address']['line2']
neha['address'].line2

NIT.Framework.buttons.createRoundButton({text:'Login'})
NIT.Framework.buttons.createLargeButton({text:'Login'})

// decoding above syntax
var NIT = {
	Framework: {
		buttons: {
			createRoundButton: function(input){
				console.log(input.text);
			},
			createLargeButton: function(input){
				console.log(input.text);
			}
		}
	}
}

// Day 2 - End

// Day 3 - Start

// function returning object

  function createPerson(fn, ln, age, city) {
	return {
		name: fn + ' ' + ln,
		age: age,
		city: city
	}
  }

  var hari = createPerson('Hari', 'Krishna', 20, 'Hyd');
  
console.log(NIT.Admin.GetAccount('Keerthi')['FullName'].FirstName);

notes:
1. () indicates function
2. . or [] indicates object


// decoding

var NIT = {
	Admin: {
		GetAccount: function(name) {
			return {
				FullName: {
					FirstName: ''
				}
			}
		}
	}
}

// return is not only used for returning the result, we can also use for stopping the execution and returns to called function
function process(isTerminate){
	console.log('Started');
	if(isTerminate) {
		console.log('Terminate');
		return;
	}
	
	console.log('End');
}
 
Arrays => Collection
		it is an object having numeric keys and starts with 0 key and increments by 1 

// array of numbers
var numbers = [1, 2, 3, 4, 5];
here index starts with 0 and increments by 1

// accessing items

numbers[0] => 1
numbers[1] => 2
numbers[2] => 3
numbers[3] => 4
numbers[4] => 5
numbers[5] => undefined

// array of strings
var students = ['Kathik', 'Preethi', 'Venkat', 'Neha', 'Rakesh']

// adding item to array => push => added item at the end of array
students.push('Deepak')

// removing item from array => pop => removes last item from array
students.pop()

// Iterating arrays
// Approach - 1 - For
for(var index = 0; index < students.length; index ++){
	console.log(index);
	var student = students[index];
	console.log(student);
}

// Approach 2 - For In - Iterating using index
for( var index in students){
	console.log(index);
	var student = students[index];
	console.log(student);
}

// Approach 3 - For Of - Iterating using Item
for( var student of students){
	console.log(student);
}

// array of objects
var persons = [ 
	{ name: 'Karthik', age: 20, city: 'Hyderabad' }, 
	{ name: 'Keerthi', age: 25, city: 'Bangalore' }, 
	{ name: 'Pranesh', age: 30, city: 'Bangalore' },
	{ name: 'Venu', age: 35, city: 'Delhi' }
]

for( var person of persons){
	console.log( person.name + ' with ' + person.age + ' is from ' + person.city );
}

// print persons where age is greater than 25
for( var person of persons){
	if(person.age > 25) {
		console.log( person.name + ' with ' + person.age + ' is from ' + person.city );
	}
}

// print persons where age is greater than 25 or city is Bangalore
for( var person of persons){
	if(person.age > 25 || person.city == 'Bangalore') {
		console.log( person.name + ' with ' + person.age + ' is from ' + person.city );
	}
}

// print persons where age is greater than 25 and city is Bangalore
for( var person of persons){
	if(person.age > 25 && person.city == 'Bangalore') {
		console.log( person.name + ' with ' + person.age + ' is from ' + person.city );
	}
}

// array of different types

var items = [ 100, 'Krishna', true, undefined, { line1: '1/2/3', line2: 'Ameerpet'}, function(x, y) { return x + y; } ]

// printing Ameerpet
items[4].line2

// executing function
items[5](100, 20) => 120


NIT.Calculator['Add'](10, 20)

var NIT = {
	Calculator: {
		Add: function(x, y) { }
	}
}

// Convertions
// object to string => JSON.stringify => usually we send data in string format to backend

// string to object => JSON.parse => backend returns in string format, to decode values we need to convert to object

var person = {
	name: "Venu", 
	age: 35, 
	city: "Delhi"
}

var str = JSON.stringify(person)

var person_Object = JSON.parse(str);

var JSON = {
	stringify: function(value) {},
	parse: function(value) {}
}


// End - Day 3

// Start - Day 4

Naming Convention for Variables =>
Camel Case => 
	first letter will be in lower case, for every word joining higher case letter is used
	var helloWorld, scientificCalculator 
	creating variables/functions
Variable Case => 
    first letter will be in upper case, for every word joining higher case letter is used
	Student, Person
	creating class
Higher Case =>
	all letters will be in higher case
	STATES, COUNTRIES 
	creating constants or static data
LOWER Case =>
	all letters will be in lower case
	creating variables
	student, person

var neha = {
	name: 'Neha Singh',
	age: 30,
	city: 'Hyderabad'
}

var prakash = {
	name: 'Prakash Singh',
	age: 30,
	city: 'Hyderabad'
}

// Object Oriented Concepts
	Class
	Object
	Inheritance
	Constructor
	Data Hiding or Access Specifiers
	
Advantages
	Data redundancy can be removed 
	
Class - Structure
Object/Instance - Real Values of class
Constructor - passing default values while creating object

// Creating a class - Approach 1
// Syntax - simple
var className = function() {
	return {
		
	}
}

// Syntax - complete
var className = function(constructor args) {
	// private function/variables
	return {
		// public attributes/variables
		// public methods
	}
}

// Syntax for creating object
var object = new className();

var Student = function(){
	return {
		
	}
}

// simple class
function Student() {
	return {
	}
}

// simple class having 3 attributes/variables
function Student2() {
	return {
		name: '',
		age: 0,
		city: ''
	}
}

var neha = new Student2();
var prakash = new Student2();

// class with constructor
function Student3(username, userage, usercity) {
	return {
		name: username,
		age: userage,
		city: usercity
	}
}
var neha = new Student3('Neha Singh', 30, 'Hyderabad');
var prakash = new Student3('Prakash Singh', 30, 'Hyderabad');

// class with constructor where object is passed as input
function Student4(input) {
	return {
		name: input.username,
		age: input.userage,
		city: input.usercity
	}
}
var neha = new Student4( { username: 'Neha Singh', userage: 30, usercity: 'Hyderabad' });
var prakash = new Student4({ username: 'Prakash Singh', userage: 30, usercity: 'Hyderabad'});

var test = new Student4( { username: 'Test' });

// class with constructor and handling undefined
function Student5(input) {
	input = input || {};
	input.username = input.username || 'Guest User';
	input.userage = input.userage || '';
	input.usercity = input.usercity || '';
	
	return {
		name: input.username,
		age: input.userage,
		city: input.usercity
	}
}

var guest = new Student5();

Access Specifiers => private, public, global method/variable

var Person = function(firstName, lastName){
	return {
		getFullName: function() {
			return firstName + ' ' + lastName;
		}
	}
}
		
Project
variables, attributes, fields, properties are same
function, method, api are same
	
// Calculator
var Calculator = function(){
	var secret = '123456';
	var printScreen = function(value){
		console.log('Result is ' + value);
	}
	return {
		version: 1.0,
		add: function(x, y) {
			var z = x + y;
			printScreen(z);
			return z;
		},
		sub: function(x, y) {
			var z = x + y;
			printScreen(z);
			return z;
		},
		printSecret: function(){
			console.log(secret.replace(1234, 'xxxx'));
		}
	}
}


var calc1 = new Calculator();

var Person = function(){
	return {
		welcome: function(){
			console.log('Welcome to Demo');
		}
	}
}
var p1 = new Person();
var p2 = new Person();
var p3 = new Person();

p1.welcome() => Welcome to Demo
p2.welcome() => Welcome to Demo
p3.welcome() => Welcome to Demo

// we can override any variable/function of object. it will not affect other instances
p2.welcome = function() {
	console.log('Welcome to Overided Demo');
}

p1.welcome() => Welcome to Demo
p2.welcome() => Welcome to Overided Demo
p3.welcome() => Welcome to Demo

School Management
	Person - CRUD - Create Retrieve Update Delete
	Teacher - CRUD
	Class - CRUD
	Marks - CRUD
	Subjects - CRUD
	
	Login - login, logout







