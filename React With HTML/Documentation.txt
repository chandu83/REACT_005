React
	Original DOM
	Virtual DOM
	
Restaurants
	Krutunga
	Paradise
	Bawarchi
	
Befault => 
	data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 2, label: 'Paradise' },
		{ id: 3, label: 'Bawarchi' }
	]

Original DOM
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>
	
Virtual DOM => replica/clone of original DOM
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>

Step 1:
On click of refresh icon
data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 2, label: 'Paradise' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
data changed => state changed
Virtual DOM is recreated.
Virtual DOM =>
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
	
Starts comparison with original DOM
	<div>Krutunga</div>				<div>Krutunga</div>
	<div>Paradise</div>				<div>Paradise</div>
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>

Step 2: Paradise is deleted
data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
Virtual DOM is recreated.
Virtual DOM =>
	<div>Krutunga</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
Starts comparison with original DOM
	<div>Krutunga</div>				<div>Krutunga</div>
	<div>Paradise</div>	Deleted  <=
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>	

Step 2: Krutunga is updated to Kritunga
data = [
		{ id: 1, label: 'Kritunga' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
Virtual DOM is recreated.
Virtual DOM =>
	<div>Kritunga</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
Starts comparison with original DOM
	<div>Krutunga</div>	Updated  <=	<div>Kritunga</div>
	<div>Paradise</div>	Deleted  <=
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>
						
In comparison,
	if it finds new node in virtual DOM => injected to Original DOM
	if it finds any missing node in virtual DOM => removed in Original DOM
	if it finds any updated node in virtual DOM => updates node in Original DOM

Libraries to Import
	React - React.createElement(type, attributes, innerhtml)
	ReactDOM - ReactDOM.render(what to render, where to render);
	
// button
ReactDOM.render(React.createElement('button'), document.getElementById('root'))

ReactDOM.render(React.createElement('div'), document.getElementById('app'))
React.createElement('div', { id: 'div1', items: [ {}, {}]}, 'Welcome to Demo');

React.createElement(type of element, attributes, innerhtml)
	
div having label and button with title Welcome

React.createElement('div', 
	{ id: 'div1', items: 
		[ 
			React.createElement('label'...), 
			React.createElement('textbox', ....)
		]
	}, 
	'Welcome');
	
<div>
	<input type='label' value='UserName' />
	<input type='text'/>
</div>

Process
	<input type='label' value='UserName' />
	will be converted to 
	React.createElement('label', { }, 'UserName');
	will generate html element
	
JSX vs HTML
HTML Elements => directly rendered
JSX Elements => converted to React.createElement and then html elements are created in javascript dynamically


TestComponent({ title: 'Welcome to React Demo'})
<TestComponent title='Welcome to React Demo' />

Important Points
	Use curly braces for variables with in jsx elements.

class Person {
	constructor(props){
		this.props = props;
	}
	getName(){
		return this.props.name;
	}
}

var kavya = new Person({ name: 'Kavya'});
kavya.getName() => Kavya

class Student {
	constructor(props){
		this.props = props;
	}
	getAge(){
		return this.props.age;
	}
}
var prakash = new Student({age: 20})
prakash.getAge() => 20


class Human {
	constructor(props){
		this.props = props;
	}
}
class Person2 extends Human{
	getName(){
		return this.props.name;
	}
}
class Student2 extends Human{
	getAge(){
		return this.props.age;
	}
}


Creating Es6 React Class =>
	Create a class which extends React.Component and implement the render method.
	view code is added inside render method
	Internally it has some mechanism to read output of render method and generate ui elements

Variables
Block Level => var name; 
Public variable => this.name;
Props => this.props.name => props means the attributes that the component receives
							not editable
Constants => const name;

// State level variables
Variables if updated, screen updates automatically

this.state = {
	a: 1,
	b: 2,
	c: 3,
	d: 4,
	e: 5
}

// updating state => we need to use helper method setState
c to 30 e to 50
this.setState({ c: 30, e: 50})
here c and e values are changed, screen refreshes automatically

c to 3, e to 5 (no change in values)
this.setState({ c: 3, e: 5 })
here c and e values are not changed, screen will not refresh

this.state = {
	res: ['R1', 'R2', 'R3']
}

this.setState({ res: ['R1', 'R2', 'R3', 'R4'] })

// Considering public and state variables
if there is a screen update when the value is changed in variable, then place it inside state.

Variables
Block Level => var name; 
Public variable => this.name;
Props => this.props.name => props means the attributes that the component receives
							not editable
State => this.state.name
Constants => const name;

// assume there are 0 restaurants, when i click on button i need to get 3 restaurants.

// Initializing restaurants
constructor(props){
	super(props);
	this.state = {
		restaurants: []
	}
}

onRefreshButtonClick (){
	this.setState({ restaurants: [ 'R1', 'R2', 'R3'] })
}

super(props) => to trigger base class(React.Component) constructor in order to create props

inside the method, scope is null by default. we need to .bind(this) in order to pass the scope

constructor => default values
setState => updating the state
.bind => passing the scope to function or accessing the scope with in the function

// Applying Styles
// Inline styles
style = {{ color: 'red', border: '1px solid'}}

HTML style => color, border, background-image, background-color
JSX style  => color, border, backgroundImage, backgroundColor

// using class attribute
no difference between JSX and HTML 














