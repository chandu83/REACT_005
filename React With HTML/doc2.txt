React
ReactDOM

	ReactDOM.render(what to render, where to render)
	
// button
ReactDOM.render(React.createElement('button'), document.getElementById('root'))

ReactDOM.render(React.createElement('div'), document.getElementById('app'))
React.createElement('div', { id: 'div1', items: [ {}, {}]}, 'Welcome to Demo');

React.createElement(type of element, attributes, innerhtml)
	
div having label and button with title Welcome

React.createElement('div', 
	{ id: 'div1', items: 
		[ 
			React.createElement('label'...), 
			React.createElement('textbox', ....)
		]
	}, 
	'Welcome');
	
<div>
	<input type='label' value='UserName' />
	<input type='text'/>
</div>

Process
	<input type='label' value='UserName' />
	will be converted to 
	React.createElement('label', { }, 'UserName');
	will generate html element
	
JSX vs HTML
HTML Elements => directly rendered
JSX Elements => converted to React.createElement and then html elements are created in javascript dynamically


TestComponent({ title: 'Welcome to React Demo'})
<TestComponent title='Welcome to React Demo' />


class Person {
	constructor(props){
		this.props = props;
	}
	getName(){
		return this.props.name;
	}
}

var kavya = new Person({ name: 'Kavya'});
kavya.getName() => Kavya

class Student {
	constructor(props){
		this.props = props;
	}
	getAge(){
		return this.props.age;
	}
}
var prakash = new Student({age: 20})
prakash.getAge() => 20


class Human {
	constructor(props){
		this.props = props;
	}
}
class Person2 extends Human{
	getName(){
		return this.props.name;
	}
}
class Student2 extends Human{
	getAge(){
		return this.props.age;
	}
}


Creating Es6 React Class =>
	Create a class which extends React.Component and implement the render method.
	view code is added inside render method
	Internally it has some mechanism to read output of render method and generate ui elements

Variables
Block Level => var name; 
Public variable => this.name;
Props => this.props.name => props means the attributes that the component receives
							not editable
Constants => const name;



// State level variables
Variables if updated, screen updates automatically

this.state = {
	a: 1,
	b: 2,
	c: 3,
	d: 4,
	e: 5
}

// updating state => we need to use helper method setState
c to 30 e to 50
this.setState({ c: 30, e: 50})
here c and e values are changed, screen refreshes automatically

c to 3, e to 5 (no change in values)
this.setState({ c: 3, e: 5 })
here c and e values are not changed, screen will not refresh

this.state = {
	res: ['R1', 'R2', 'R3']
}

this.setState({ res: ['R1', 'R2', 'R3', 'R4'] })

// Considering public and state variables
if there is a screen update when the value is changed in variable, then place it inside state.

Variables
Block Level => var name; 
Public variable => this.name;
Props => this.props.name => props means the attributes that the component receives
							not editable
State => this.state.name
Constants => const name;

// assume there are 0 restaurants, when i click on button i need to get 3 restaurants.

// Initializing restaurants
constructor(props){
	super(props);
	this.state = {
		restaurants: []
	}
}

onRefreshButtonClick (){
	this.setState({ restaurants: [ 'R1', 'R2', 'R3'] })
}

super(props) => to trigger base class(React.Component) constructor in order to create props

inside the method, scope is null by default. we need to .bind(this) in order to pass the scope

constructor => default values
setState => updating the state
.bind => passing the scope to function or accessing the scope with in the function

// Applying Styles
// Inline styles
style = {{ color: 'red', border: '1px solid'}}

HTML style => color, border, background-image, background-color
JSX style  => color, border, backgroundImage, backgroundColor

// using class attribute
no difference between JSX and HTML 

using plain javascript, fetchig textbox value of HTML component
document.getElementById('username') -- gets reference of control
document.getElementById('username').value -- gets value of that control
document.getElementById('isMale').checked -- gets true/false of checkbox

In React
When ever method is configured for event, one object is passed as an input to the method. This object is synthetic event object.
event.target will return reference of control 
event.target.value -- to get control value
event.preventDefault() => it stops triggering method for multiple times

// string - helper method indexOf gives the character index in original string
"hello".indexOf('h') => 0
"hello".indexOf('e') => 1
"hello".indexOf('t') => -1

// string - helper method startWith returns true if it is having same string in the beginning
"hello".startWith('h') => true
"hello".startWith('o') => false


